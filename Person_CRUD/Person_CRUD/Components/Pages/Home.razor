@page "/"
@using MySqlConnector
<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>
<h3>Add New Person</h3>

<div class="mb-3">
    <input placeholder="First Name" @bind="newFirstName" class="form-control" />
</div>
<div class="mb-3">
    <input placeholder="Last Name" @bind="newLastName" class="form-control" />
</div>
<div class="mb-3">
    <button class="btn btn-primary" @onclick="AddPerson">Add</button>
</div>
<table class="table">
    <thead>
    <tr>
        @foreach(var column in new[] { "id", "firstName", "lastName" })
        {
            <th>@column</th>
        }
        <th>delete</th>
    </tr>
    </thead>
    @foreach (var person in persons)
    {
        <tr>
            @if (editingPersonId == person.id)
            {
                <td>@person.id</td>
                <td><input @bind="editFirstName" /></td>
                <td><input @bind="editLastName" /></td>
                <td>
                    <button @onclick="() => SavePerson(person.id)">Save</button>
                    <button @onclick="CancelEdit">Cancel</button>
                </td>
            }
            else
            {
                <td>@person.id</td>
                <td>@person.firstName</td>
                <td>@person.lastName</td>
                <td>
                    <button @onclick="() => DeletePerson(person.id)">Delete</button>
                    <button @onclick="() => StartEdit(person)">Edit</button>
                </td>
            }
        </tr>
    }

</table>

@code{
    private int? editingPersonId = null;
    private string editFirstName = string.Empty;
    private string editLastName = string.Empty;
    
    private string newFirstName = string.Empty;
    private string newLastName = string.Empty;

    private List<Person> persons = new();
    string connectionString = "server=localhost;user=root;password=insy;database=mydb";

    protected override async Task OnInitializedAsync()
    {
        using var connection = new MySqlConnection(connectionString);
        await connection.OpenAsync();

        string query = "SELECT id, firstName, lastName FROM Person";
        using var command = new MySqlCommand(query, connection);
        using var reader = await command.ExecuteReaderAsync();

        while (await reader.ReadAsync())
        {
            persons.Add(new Person
            {
                id = reader.GetInt32("id"),
                firstName = reader.GetString("firstName"),
                lastName = reader.GetString("lastName")
            });
        }
    }
    private async Task DeletePerson(int id)
    {
        try
        {
            using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();

            string deleteQuery = "DELETE FROM Person WHERE id = @id";
            using var command = new MySqlCommand(deleteQuery, connection);
            command.Parameters.AddWithValue("@id", id);
            int affectedRows = await command.ExecuteNonQueryAsync();

            if (affectedRows > 0)
            {
                persons.RemoveAll(p => p.id == id);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Löschen: {ex.Message}");
        }
    }
    private void StartEdit(Person person)
    {
        editingPersonId = person.id;
        editFirstName = person.firstName;
        editLastName = person.lastName;
    }

    private void CancelEdit()
    {
        editingPersonId = null;
        editFirstName = string.Empty;
        editLastName = string.Empty;
    }

    private async Task SavePerson(int id)
    {
        try
        {
            using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();

            string updateQuery = "UPDATE Person SET firstName = @firstName, lastName = @lastName WHERE id = @id";
            using var command = new MySqlCommand(updateQuery, connection);
            command.Parameters.AddWithValue("@firstName", editFirstName);
            command.Parameters.AddWithValue("@lastName", editLastName);
            command.Parameters.AddWithValue("@id", id);

            int affectedRows = await command.ExecuteNonQueryAsync();

            if (affectedRows > 0)
            {
                var person = persons.FirstOrDefault(p => p.id == id);
                if (person != null)
                {
                    person.firstName = editFirstName;
                    person.lastName = editLastName;
                }
                CancelEdit();
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Update fehlgeschlagen.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Speichern: {ex.Message}");
        }
    }
    private async Task AddPerson()
    {
        Console.WriteLine("AddPerson wurde aufgerufen");

        if (string.IsNullOrWhiteSpace(newFirstName) || string.IsNullOrWhiteSpace(newLastName))
        {
            Console.WriteLine("Vorname und Nachname dürfen nicht leer sein.");
            return;
        }

        try
        {
            using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();

            string insertQuery = "INSERT INTO Person (firstName, lastName) VALUES (@firstName, @lastName)";
            using var command = new MySqlCommand(insertQuery, connection);
            command.Parameters.AddWithValue("@firstName", newFirstName);
            command.Parameters.AddWithValue("@lastName", newLastName);

            int affectedRows = await command.ExecuteNonQueryAsync();

            if (affectedRows > 0)
            {
                // Holen der ID des neuen Eintrags
                long newId = command.LastInsertedId;

                persons.Add(new Person
                {
                    id = (int)newId,
                    firstName = newFirstName,
                    lastName = newLastName
                });

                // Reset input
                newFirstName = string.Empty;
                newLastName = string.Empty;

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Hinzufügen: {ex.Message}");
        }
    }


}